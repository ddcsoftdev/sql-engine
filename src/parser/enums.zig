pub const TokenId = enum {
    LITERAL,
    KEYWORD,
    IDENTIFIER,
    EOF,

    pub fn nameForErrorDisplay(self: TokenId) []const u8 {
        return switch (self) {
            .LITERAL => "<literal>",
            .KEYWORD => "<keyword>",
            .IDENTIFIER => "<identifier>",
            .EOF => "<eof>",
        };
    }
};

pub const KeywordId = enum {
    ALIAS,
    ALTER,
    ALL,
    AND,
    ANY,
    AS,
    ASC,
    AVG,

    BETWEEN,
    BEGIN,
    BIND,
    BIT,
    BOTH,
    BY,

    CASE,
    CHAR,
    CHARACTER,
    CHECK,
    CLOSE,
    COALESCE,
    COLEFTCH,
    COMMIT,
    CONNECT,
    COUNT,
    CREATE,
    CURRENT,

    DATABASE,
    DATE,
    DATETIME,
    DEC,
    DECIMAL,
    DECLARE,
    DELETE,
    DESC,
    DISTINCT,
    DOUBLE,
    DROP,

    ELSEEND,
    ESCAPE,
    EXCEPT,
    EXECUTE,
    EXISTS,

    FETCH,
    FILE,
    FLOAT,
    FOR,
    FROM,

    GRAPHIC,
    GROUP,

    HAVING,

    IMAGE,
    IN,
    INNER,
    INSERT,
    INT,
    INTEGER,
    INTERSECT_INTO,
    IS,

    JOIN,

    KEY,

    LEADING,
    LEFT,
    LIKE,
    LOGICAL,
    LONG,

    MAX,
    MIN,
    MONEY,

    NOT,
    NULL,
    NULLIF,
    NUMBER,
    NUMERIC,

    OF,
    OFF,
    OPEN,
    ON,
    ONLY,
    OPTION,
    OR,
    ORDER,
    OUTER,

    PRECISION,
    PRIMARY,

    RAW,
    REAL,
    REFERENCE,
    RIGHT,
    ROLLBACK,

    SELECT,
    SERIAL,
    SET,
    SMALLFLOAT,
    SMALLINT,
    SOME,
    SQLID,
    SUM,
    SYSNAME,

    TABLE,
    TEXT,
    TIME,
    TIMESTAMP,
    TIMEZONE,
    TO,

    USER,
    UNION,
    UNIQUE,
    USER_TYPE_NAME,
    USING,
    UPDATE,

    pub fn nameForErrorDisplay(self: KeywordId) []const u8 {
        return switch (self) {
            .ALIAS => "<alias>",
            .ALTER => "<alter>",
            .ALL => "<all>",
            .AND => "<and>",
            .ANY => "<any>",
            .AS => "<as>",
            .ASC => "<asc>",
            .AVG => "<avg>",
            .BETWEEN => "<between>",
            .BEGIN => "<begin>",
            .BIND => "<bind>",
            .BIT => "<bit>",
            .BOTH => "<both>",
            .BY => "<by>",
            .CASE => "<case>",
            .CHAR => "<char>",
            .CHARACTER => "<character>",
            .CHECK => "<check>",
            .CLOSE => "<close>",
            .COALESCE => "<coalesce>",
            .COLEFTCH => "<coleftch>",
            .COMMIT => "<commit>",
            .CONNECT => "<connect>",
            .COUNT => "<count>",
            .CREATE => "<create>",
            .CURRENT => "<current>",
            .DATABASE => "<database>",
            .DATE => "<date>",
            .DATETIME => "<datetime>",
            .DEC => "<dec>",
            .DECIMAL => "<decimal>",
            .DECLARE => "<declare>",
            .DELETE => "<delete>",
            .DESC => "<desc>",
            .DISTINCT => "<distinct>",
            .DOUBLE => "<double>",
            .DROP => "<drop>",
            .ELSEEND => "<elseend>",
            .ESCAPE => "<escape>",
            .EXCEPT => "<except>",
            .EXECUTE => "<execute>",
            .EXISTS => "<exists>",
            .FETCH => "<fetch>",
            .FILE => "<file>",
            .FLOAT => "<float>",
            .FOR => "<for>",
            .FROM => "<from>",
            .GRAPHIC => "<graphic>",
            .GROUP => "<group>",
            .HAVING => "<having>",
            .IMAGE => "<image>",
            .IN => "<in>",
            .INNER => "<inner>",
            .INSERT => "<insert>",
            .INT => "<int>",
            .INTEGER => "<integer>",
            .INTERSECT_INTO => "<intersect_into>",
            .IS => "<is>",
            .JOIN => "<join>",
            .KEY => "<key>",
            .LEADING => "<leading>",
            .LEFT => "<left>",
            .LIKE => "<like>",
            .LOGICAL => "<logical>",
            .LONG => "<long>",
            .MAX => "<max>",
            .MIN => "<min>",
            .MONEY => "<money>",
            .NOT => "<not>",
            .NULL => "<null>",
            .NULLIF => "<nullif>",
            .NUMBER => "<number>",
            .NUMERIC => "<numeric>",
            .OF => "<of>",
            .OFF => "<off>",
            .OPEN => "<open>",
            .ON => "<on>",
            .ONLY => "<only>",
            .OPTION => "<option>",
            .OR => "<or>",
            .ORDER => "<order>",
            .OUTER => "<outer>",
            .PRECISION => "<precision>",
            .PRIMARY => "<primary>",
            .RAW => "<raw>",
            .REAL => "<real>",
            .REFERENCE => "<reference>",
            .RIGHT => "<right>",
            .ROLLBACK => "<rollback>",
            .SELECT => "<select>",
            .SERIAL => "<serial>",
            .SET => "<set>",
            .SMALLFLOAT => "<smallfloat>",
            .SMALLINT => "<smallint>",
            .SOME => "<some>",
            .SQLID => "<sqlid>",
            .SUM => "<sum>",
            .SYSNAME => "<sysname>",
            .TABLE => "<table>",
            .TEXT => "<text>",
            .TIME => "<time>",
            .TIMESTAMP => "<timestamp>",
            .TIMEZONE => "<timezone>",
            .TO => "<to>",
            .USER => "<user>",
            .UNION => "<union>",
            .UNIQUE => "<unique>",
            .USER_TYPE_NAME => "<user_type_name>",
            .USING => "<using>",
            .UPDATE => "<update>",
        };
    }
};

pub const IdentifierId = enum {
    AUTHORIZATION_ID,
    LOCATION_ID,
    COLUMN_NAME,
    TABLE_NAME,
    VIEW_NAME,
    STATEMENT_NAME,
    RANGE_VARIABLE,
    PROCEDURE_NAME,

    pub fn nameForErrorDisplay(self: IdentifierId) []const u8 {
        return switch (self) {
            .AUTHORIZATION_ID => "<authorization_id>",
            .LOCATION_ID => "<location_id>",
            .COLUMN_NAME => "<column_name>",
            .TABLE_NAME => "<table_name>",
            .VIEW_NAME => "<view_name>",
            .STATEMENT_NAME => "<statement_name>",
            .RANGE_VARIABLE => "<range_variable>",
            .PROCEDURE_NAME => "<procedure_name>",
        };
    }
};

pub const LiteralId = enum {
    NUMERIC_LITERAL,
    NUMERIC_TAIL,
    APROX_LITERAL,
    ALPHA_LITERAL,
    LITERAL,
    INTEGER,
    LIT_CHARACTER,

    pub fn nameForErrorDisplay(self: LiteralId) []const u8 {
        return switch (self) {
            .NUMERIC_LITERAL => "<numeric_literal>",
            .NUMERIC_TAIL => "<numeric_tail>",
            .APROX_LITERAL => "<aprox_literal>",
            .ALPHA_LITERAL => "<alpha_literal>",
            .LITERAL => "<literal>",
            .INTEGER => "<integer>",
            .LIT_CHARACTER => "<lit_character>",
        };
    }
};

pub const DelimiterId = enum {
    COMMA,
    OPEN_PAREN,
    CLOSE_PAREN,
    LESS_THAN,
    GREATER_THAN,
    DOT,
    COLON,
    EQUALS,
    STAR,
    PLUS,
    MINUS,
    SLASH,
    NOT_EQUAL,
    LESS_EQUAL_THAN,
    GREATER_EQUAL_THAN,

    pub fn nameForErrorDisplay(self: DelimiterId) []const u8 {
        return switch (self) {
            .COMMA => ",",
            .OPEN_PAREN => "(",
            .CLOSE_PAREN => ")",
            .LESS_THAN => "<",
            .GREATER_THAN => ">",
            .DOT => ".",
            .COLON => ":",
            .EQUALS => "=",
            .STAR => "*",
            .PLUS => "+",
            .MINUS => "-",
            .SLASH => "/",
            .NOT_EQUAL => "<>",
            .LESS_EQUAL_THAN => "<=",
            .GREATER_EQUAL_THAN => ">=",
        };
    }
};
